diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 581bfba..a18e1ce 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -56,8 +56,10 @@
 #include <OMX_AsString.h>
 
 #ifdef USE_SAMSUNG_COLORFORMAT
+#ifndef SPRD_HARDWARE
 #include <sec_format.h>
 #endif
+#endif
 
 #include "include/avc_utils.h"
 
@@ -1315,6 +1317,10 @@ void ACodec::setNativeWindowColorFormat(OMX_COLOR_FORMATTYPE &eNativeColorFormat
     if (!strcasecmp(mComponentName.c_str(), "OMX.SEC.AVC.Decoder")
         || !strcasecmp(mComponentName.c_str(), "OMX.SEC.FP.AVC.Decoder")
         || !strcasecmp(mComponentName.c_str(), "OMX.SEC.MPEG4.Decoder")
+        || !strcasecmp(mComponentName.c_str(), "OMX.sprd.mpeg4.decoder")
+        || !strcasecmp(mComponentName.c_str(), "OMX.sprd.h263.decoder")
+        || !strcasecmp(mComponentName.c_str(), "OMX.sprd.h264.decoder")
+        || !strcasecmp(mComponentName.c_str(), "OMX.sprd.vpx.decoder")
         || !strcasecmp(mComponentName.c_str(), "OMX.Exynos.AVC.Decoder")) {
         switch (eNativeColorFormat) {
             case OMX_COLOR_FormatYUV420SemiPlanar:
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
index f6b4741..2bd34ea 100644
--- a/media/libstagefright/CameraSource.cpp
+++ b/media/libstagefright/CameraSource.cpp
@@ -116,7 +116,7 @@ static int32_t getColorFormat(const char* colorFormat) {
     }
 
     if (!strcmp(colorFormat, CameraParameters::PIXEL_FORMAT_YUV420SP)) {
-#ifdef USE_SAMSUNG_COLORFORMAT
+#if defined(USE_SAMSUNG_COLORFORMAT) && !defined(SPRD_HARDWARE)
         static const int OMX_SEC_COLOR_FormatNV12LPhysicalAddress = 0x7F000002;
         return OMX_SEC_COLOR_FormatNV12LPhysicalAddress;
 #else
diff --git a/media/libstagefright/MediaBufferGroup.cpp b/media/libstagefright/MediaBufferGroup.cpp
index 6ac6d4a..9e8c953 100644
--- a/media/libstagefright/MediaBufferGroup.cpp
+++ b/media/libstagefright/MediaBufferGroup.cpp
@@ -55,6 +55,13 @@ void MediaBufferGroup::add_buffer(MediaBuffer *buffer) {
     mLastBuffer = buffer;
 }
 
+#ifdef ADD_LEGACY_ACQUIRE_BUFFER_SYMBOL
+extern "C" status_t _ZN7android16MediaBufferGroup14acquire_bufferEPPNS_11MediaBufferE(
+    MediaBufferGroup* group, MediaBuffer **out) {
+    return group->acquire_buffer(out, false);
+}
+#endif
+
 status_t MediaBufferGroup::acquire_buffer(
         MediaBuffer **out, bool nonBlocking) {
     Mutex::Autolock autoLock(mLock);
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index de00ff2..527f9d3 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -270,6 +270,11 @@ uint32_t OMXCodec::getComponentQuirks(
     if (info->hasQuirk("output-buffers-are-unreadable")) {
         quirks |= kOutputBuffersAreUnreadable;
     }
+#ifdef SPRD_HARDWARE
+    if (info->hasQuirk("needs-flush-before-disable")) {
+        quirks |= kNeedsFlushBeforeDisable;
+    }
+#endif
 
     return quirks;
 }
@@ -1799,6 +1804,27 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
 #endif
     }
 
+#ifdef USE_SAMSUNG_COLORFORMAT
+    OMX_COLOR_FORMATTYPE eNativeColorFormat = def.format.video.eColorFormat;
+    // Convert OpenMAX color format to native color format
+    switch (eNativeColorFormat) {
+    case OMX_COLOR_FormatYUV420SemiPlanar:
+        eNativeColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YCbCr_420_SP;
+        break;
+    case OMX_COLOR_FormatYUV420Planar:
+        // Fallthrough
+    default:
+        eNativeColorFormat = (OMX_COLOR_FORMATTYPE)HAL_PIXEL_FORMAT_YCbCr_420_P;
+        break;
+    }
+    err = setNativeWindowSizeFormatAndUsage(
+            mNativeWindow.get(),
+            def.format.video.nFrameWidth,
+            def.format.video.nFrameHeight,
+            eNativeColorFormat,
+            rotationDegrees,
+            usage | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP);
+#else
     err = setNativeWindowSizeFormatAndUsage(
             mNativeWindow.get(),
             def.format.video.nFrameWidth,
@@ -1806,6 +1832,7 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
             def.format.video.eColorFormat,
             rotationDegrees,
             usage | GRALLOC_USAGE_HW_TEXTURE | GRALLOC_USAGE_EXTERNAL_DISP);
+#endif
     if (err != 0) {
         return err;
     }
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 23215dd..a7e5c63 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -184,11 +184,11 @@ static int load_audio_interface(const char *if_name, audio_hw_device_t **dev)
     if (rc) {
         goto out;
     }
-    if ((*dev)->common.version < AUDIO_DEVICE_API_VERSION_MIN) {
+    /*if ((*dev)->common.version < AUDIO_DEVICE_API_VERSION_MIN) {
         ALOGE("%s wrong audio hw device version %04x", __func__, (*dev)->common.version);
         rc = BAD_VALUE;
         goto out;
-    }
+    }*/
     return 0;
 
 out:
@@ -1655,7 +1655,7 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
     {  // scope for auto-lock pattern
         AutoMutex lock(mHardwareLock);
 
-        if (0 == mAudioHwDevs.size()) {
+        /*if (0 == mAudioHwDevs.size()) {
             mHardwareStatus = AUDIO_HW_GET_MASTER_VOLUME;
             if (NULL != dev->get_master_volume) {
                 float mv;
@@ -1671,7 +1671,7 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
                     mMasterMute = mm;
                 }
             }
-        }
+        }*/
 
         mHardwareStatus = AUDIO_HW_SET_MASTER_VOLUME;
         if ((NULL != dev->set_master_volume) &&
@@ -1680,12 +1680,12 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
                     AudioHwDevice::AHWD_CAN_SET_MASTER_VOLUME);
         }
 
-        mHardwareStatus = AUDIO_HW_SET_MASTER_MUTE;
+        /*mHardwareStatus = AUDIO_HW_SET_MASTER_MUTE;
         if ((NULL != dev->set_master_mute) &&
             (OK == dev->set_master_mute(dev, mMasterMute))) {
             flags = static_cast<AudioHwDevice::Flags>(flags |
                     AudioHwDevice::AHWD_CAN_SET_MASTER_MUTE);
-        }
+        }*/
 
         mHardwareStatus = AUDIO_HW_IDLE;
     }
diff --git a/services/audiopolicy/common/managerdefinitions/include/ConfigParsingUtils.h b/services/audiopolicy/common/managerdefinitions/include/ConfigParsingUtils.h
index 6f80435..bf854f3 100644
--- a/services/audiopolicy/common/managerdefinitions/include/ConfigParsingUtils.h
+++ b/services/audiopolicy/common/managerdefinitions/include/ConfigParsingUtils.h
@@ -72,6 +72,9 @@ const StringToEnum sDeviceTypeToEnumTable[] = {
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_HDMI_ARC),
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_SPDIF),
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_FM),
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_FM_HEADSET),
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_FM_SPEAKER),
+    STRING_TO_ENUM(AUDIO_DEVICE_OUT_ALL_FM),
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_AUX_LINE),
     STRING_TO_ENUM(AUDIO_DEVICE_OUT_IP),
 #ifdef AUDIO_EXTN_AFE_PROXY_ENABLED
@@ -131,6 +134,9 @@ const StringToEnum sDeviceNameToEnumTable[] = {
     NAME_TO_ENUM("HDMI ARC Out", AUDIO_DEVICE_OUT_HDMI_ARC),
     NAME_TO_ENUM("S/PDIF Out", AUDIO_DEVICE_OUT_SPDIF),
     NAME_TO_ENUM("FM transceiver Out", AUDIO_DEVICE_OUT_FM),
+    NAME_TO_ENUM("FM Headset Out", AUDIO_DEVICE_OUT_FM_HEADSET),
+    NAME_TO_ENUM("FM Speaker Out", AUDIO_DEVICE_OUT_FM_SPEAKER),
+    NAME_TO_ENUM("", AUDIO_DEVICE_OUT_ALL_FM),
     NAME_TO_ENUM("Aux Line Out", AUDIO_DEVICE_OUT_AUX_LINE),
     NAME_TO_ENUM("IP Out", AUDIO_DEVICE_OUT_IP),
     NAME_TO_ENUM("Ambient Mic", AUDIO_DEVICE_IN_AMBIENT),
diff --git a/services/audiopolicy/common/managerdefinitions/src/ConfigParsingUtils.cpp b/services/audiopolicy/common/managerdefinitions/src/ConfigParsingUtils.cpp
index 89ef045..c718d32 100644
--- a/services/audiopolicy/common/managerdefinitions/src/ConfigParsingUtils.cpp
+++ b/services/audiopolicy/common/managerdefinitions/src/ConfigParsingUtils.cpp
@@ -15,7 +15,7 @@
  */
 
 #define LOG_TAG "APM::ConfigParsingUtils"
-//#define LOG_NDEBUG 0
+#define LOG_NDEBUG 0
 
 #include "ConfigParsingUtils.h"
 #include "AudioGain.h"
diff --git a/services/camera/libcameraservice/CameraService.cpp b/services/camera/libcameraservice/CameraService.cpp
index 3c9fd16..3c34bdd 100644
--- a/services/camera/libcameraservice/CameraService.cpp
+++ b/services/camera/libcameraservice/CameraService.cpp
@@ -181,12 +181,12 @@ void CameraService::onFirstRef()
         setUpVendorTags();
     }
 
-    mFlashlight = new CameraFlashlight(*mModule, *this);
+    /*mFlashlight = new CameraFlashlight(*mModule, *this);
     status_t res = mFlashlight->findFlashUnits();
     if (res) {
         // impossible because we haven't open any camera devices.
         ALOGE("Failed to find flash units.");
-    }
+    }*/
 
     int latestStrangeCameraId = INT_MAX;
     for (int i = 0; i < mNumberOfCameras; i++) {
@@ -237,10 +237,10 @@ void CameraService::onFirstRef()
                     conflicting));
         }
 
-        if (mFlashlight->hasFlashUnit(cameraId)) {
+        /*if (mFlashlight->hasFlashUnit(cameraId)) {
             mTorchStatusMap.add(cameraId,
                     ICameraServiceListener::TORCH_STATUS_AVAILABLE_OFF);
-        }
+        }*/
     }
 
     if (mModule->getModuleApiVersion() >= CAMERA_MODULE_API_VERSION_2_1) {
@@ -1308,13 +1308,13 @@ status_t CameraService::setTorchMode(const String16& cameraId, bool enabled,
         }
     }
 
-    status_t res = mFlashlight->setTorchMode(id, enabled);
+    /*status_t res = mFlashlight->setTorchMode(id, enabled);
 
     if (res) {
         ALOGE("%s: setting torch mode of camera %s to %d failed. %s (%d)",
                 __FUNCTION__, id.string(), enabled, strerror(-res), res);
         return res;
-    }
+    }*/
 
     {
         // update the link to client's death
@@ -2036,8 +2036,8 @@ status_t CameraService::BasicClient::finishCameraOps() {
                 String8::format("%d", mCameraId));
 
         // Notify flashlight that a camera device is closed.
-        mCameraService->mFlashlight->deviceClosed(
-                String8::format("%d", mCameraId));
+        /*mCameraService->mFlashlight->deviceClosed(
+                String8::format("%d", mCameraId));*/
     }
     // Always stop watching, even if no camera op is active
     if (mOpsCallback != NULL) {
@@ -2461,12 +2461,12 @@ void CameraService::handleTorchClientBinderDied(const wp<IBinder> &who) {
         if (mTorchClientMap[i] == who) {
             // turn off the torch mode that was turned on by dead client
             String8 cameraId = mTorchClientMap.keyAt(i);
-            status_t res = mFlashlight->setTorchMode(cameraId, false);
+            /*status_t res = mFlashlight->setTorchMode(cameraId, false);
             if (res) {
                 ALOGE("%s: torch client died but couldn't turn off torch: "
                     "%s (%d)", __FUNCTION__, strerror(-res), res);
                 return;
-            }
+            }*/
             mTorchClientMap.removeItemsAt(i);
             break;
         }
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index 53233bd..b0a926a 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -856,7 +856,7 @@ status_t CameraService::connectHelper(const sp<CALLBACK>& cameraCb, const String
         }
 
         // give flashlight a chance to close devices if necessary.
-        mFlashlight->prepareDeviceOpen(cameraId);
+        //mFlashlight->prepareDeviceOpen(cameraId);
 
         // TODO: Update getDeviceVersion + HAL interface to use strings for Camera IDs
         int id = cameraIdToInt(cameraId);
