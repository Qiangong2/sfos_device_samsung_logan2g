diff --git a/linker/Android.mk b/linker/Android.mk
index 7a9b5d9..70d4f59 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -49,6 +49,10 @@ ifeq ($(TARGET_IS_64_BIT),true)
 LOCAL_CPPFLAGS += -DTARGET_IS_64_BIT
 endif
 
+ifeq ($(TARGET_NEEDS_PLATFORM_TEXT_RELOCATIONS),true)
+LOCAL_CPPFLAGS += -DTARGET_NEEDS_PLATFORM_TEXT_RELOCATIONS
+endif
+
 # We need to access Bionic private headers in the linker.
 LOCAL_CFLAGS += -I$(LOCAL_PATH)/../libc/
 
diff --git a/linker/linker.cpp b/linker/linker.cpp
index 99c02d8..53e80f5 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -3013,20 +3013,22 @@ bool soinfo::link_image(const soinfo_list_t& global_group, const soinfo_list_t&
   if (has_text_relocations) {
     // Fail if app is targeting sdk version > 22
     // TODO (dimitry): remove != __ANDROID_API__ check once http://b/20020312 is fixed
-#if !defined(__i386__) // ffmpeg says that they require text relocations on x86
+/*#if !defined(__i386__) // ffmpeg says that they require text relocations on x86
+#if defined(TARGET_NEEDS_PLATFORM_TEXT_RELOCATIONS)
     if (get_application_target_sdk_version() != __ANDROID_API__
         && get_application_target_sdk_version() > 22) {
+#endif
       PRINT("%s: has text relocations", get_realpath());
       DL_ERR("%s: has text relocations", get_realpath());
       return false;
     }
-#endif
+#endif*/
     // Make segments writable to allow text relocations to work properly. We will later call
     // phdr_table_protect_segments() after all of them are applied and all constructors are run.
 #if defined(USE_LEGACY_BLOBS)
     DEBUG("%s has text relocations. This is wasting memory and prevents "
 #else
-    DL_WARN("%s has text relocations. This is wasting memory and prevents "
+    DEBUG("%s has text relocations. This is wasting memory and prevents "
 #endif
             "security hardening. Please fix.", get_realpath());
     if (phdr_table_unprotect_segments(phdr, phnum, load_bias) < 0) {
